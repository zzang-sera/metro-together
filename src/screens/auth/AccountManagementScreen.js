// src/screens/auth/AccountManagementScreen.js

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Alert } from 'react-native';
import { auth } from '../../config/firebaseConfig';
import { responsiveWidth, responsiveHeight } from '../../utils/responsive';
import { Ionicons } from '@expo/vector-icons';
import { logout, deleteAccount } from '../../api/auth';
import { deleteUserInfo } from '../../api/user';
import CustomButton from '../../components/CustomButton';
// üëá [1. ÏàòÏ†ï] useNavigation import Ï†úÍ±∞
/* import { useNavigation } from '@react-navigation/native'; */
import { TERMS_OF_SERVICE, LOCATION_POLICY, PRIVACY_POLICY } from '../../constants/policies';

// üëá [2. ÏàòÏ†ï] Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä navigationÏùÑ ÏßÅÏ†ë propÏúºÎ°ú Î∞õÎèÑÎ°ù Î≥ÄÍ≤Ω
const AccountManagementScreen = ({ navigation }) => {
  const user = auth.currentUser;
  // üëá [3. ÏàòÏ†ï] useNavigation() hook Ìò∏Ï∂ú Ï†úÍ±∞ (Îçî Ïù¥ÏÉÅ ÌïÑÏöî ÏóÜÏùå)
  // const navigation = useNavigation();
  
  const handleLogout = async () => { Alert.alert( "Î°úÍ∑∏ÏïÑÏõÉ", "Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?", [ { text: "Ï∑®ÏÜå", style: "cancel" }, { text: "ÌôïÏù∏", onPress: async () => await logout() } ] ); };
  const handleDeleteAccount = () => { Alert.alert( "ÌöåÏõê ÌÉàÌá¥", "Ï†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.", [ { text: "Ï∑®ÏÜå", style: "cancel" }, { text: "ÌôïÏù∏", onPress: async () => { const uid = auth.currentUser?.uid; if (uid) { const userInfoResult = await deleteUserInfo(uid); if (!userInfoResult.success) { Alert.alert("Ïò§Î•ò", "ÌöåÏõê Ï†ïÎ≥¥ ÏÇ≠Ï†ú Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."); return; } const accountResult = await deleteAccount(); if (!accountResult.success) { Alert.alert("Ïò§Î•ò", "Í≥ÑÏ†ï ÏÇ≠Ï†ú Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏ ÌõÑ ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."); return; } Alert.alert("ÌÉàÌá¥ ÏôÑÎ£å", "ÌöåÏõê ÌÉàÌá¥Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§."); } }, style: "destructive" } ] ); };
  
  const goToPolicy = (title, content) => {
    navigation.navigate('Policy', { title, content });
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.mainCard}>
        <View style={styles.greetingCard}>
          <Text style={styles.greetingText}> {user?.email || 'ÏÇ¨Ïö©Ïûê'}Îãò Î∞òÍ∞ëÏäµÎãàÎã§.</Text>
        </View>

        <CustomButton
          title="ÏÇ¨Ïö©Î≤ï Îã§ÏãúÎ≥¥Í∏∞"
          onPress={() => Alert.alert("ÏïåÎ¶º", "ÌòÑÏû¨ Í∞úÎ∞ú Ï§ëÏù∏ Í∏∞Îä•ÏûÖÎãàÎã§.")}
          type="outline"
        />

        <View style={styles.infoCard}>
          <View style={styles.cardTitleContainer}>
            <Text style={styles.cardTitle}>ÏïΩÍ¥Ä Î∞è Ï†ïÏ±Ö</Text>
          </View>
          <MenuRow text="ÏÑúÎπÑÏä§ Ïù¥Ïö© ÏïΩÍ¥Ä" onPress={() => goToPolicy('ÏÑúÎπÑÏä§ Ïù¥Ïö© ÏïΩÍ¥Ä', TERMS_OF_SERVICE)} accessibilityLabel="ÏÑúÎπÑÏä§ Ïù¥Ïö© ÏïΩÍ¥Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô" />
          <MenuRow text="ÏúÑÏπòÍ∏∞Î∞ò ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä" onPress={() => goToPolicy('ÏúÑÏπòÍ∏∞Î∞ò ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä', LOCATION_POLICY)} accessibilityLabel="ÏúÑÏπòÍ∏∞Î∞ò ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô" />
          <MenuRow text="Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®" onPress={() => goToPolicy('Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®', PRIVACY_POLICY)} isLast={true} accessibilityLabel="Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô" />
        </View>

        <View style={styles.infoCard}>
          <View style={styles.cardTitleContainer}>
            <Text style={styles.cardTitle}>Í≥ÑÏ†ïÍ¥ÄÎ¶¨</Text>
          </View>
          <MenuRow text="Î°úÍ∑∏ÏïÑÏõÉ" onPress={handleLogout} accessibilityLabel="Î°úÍ∑∏ÏïÑÏõÉ" />
          <MenuRow text="ÌöåÏõêÌÉàÌá¥" onPress={handleDeleteAccount} isDestructive={true} isLast={true} accessibilityLabel="ÌöåÏõêÌÉàÌá¥" />
        </View>
      </View>
    </ScrollView>
  );
};

const MenuRow = ({ text, onPress, isDestructive = false, isLast = false, accessibilityLabel }) => (
  <TouchableOpacity 
    style={[styles.menuRow, !isLast && styles.menuRowBorder]} 
    onPress={onPress}
    accessibilityLabel={accessibilityLabel}
  >
    <Text style={[styles.menuRowText, isDestructive && styles.destructiveText]}>{text}</Text>
    <View accessible={false} style={styles.arrowIconCircle}>
      <Ionicons name="chevron-forward" size={30} color={isDestructive ? '#ff3b30' : '#171B1B'} />
    </View>
  </TouchableOpacity>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9F9F9',
  },
  mainCard: {
    backgroundColor: '#E2E6EA',
    borderRadius: responsiveWidth(20),
    margin: responsiveWidth(16),
    padding: responsiveWidth(16),
  },
  greetingCard: {
    backgroundColor: '#FAFAFA',
    borderRadius: responsiveWidth(12),
    padding: responsiveHeight(15),
    alignItems: 'center',
    marginBottom: responsiveHeight(16),
  },
  greetingText: {
    fontFamily: 'NotoSansKR',
    fontSize: responsiveWidth(16),
    color: '#17171B',
    fontWeight: '700',
  },
  infoCard: {
    backgroundColor: '#FAFAFA',
    borderRadius: responsiveWidth(16),
    marginTop: responsiveHeight(16),
    paddingHorizontal: responsiveWidth(16),
    paddingTop: responsiveHeight(16),
    paddingBottom: responsiveHeight(4),
  },
  cardTitleContainer: {
    alignSelf: 'flex-start',
    borderWidth: 1,
    borderColor: '#14CAC9',
    borderRadius: responsiveWidth(20),
    paddingVertical: responsiveHeight(4),
    paddingHorizontal: responsiveWidth(10),
    marginBottom: responsiveHeight(10),
  },
  cardTitle: {
    fontFamily: 'NotoSansKR',
    fontWeight: '700',
    fontSize: responsiveWidth(16),
    color: '#171B1B',
  },
  menuRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: responsiveHeight(16),
  },
  menuRowBorder: {
    borderBottomWidth: 1,
    borderBottomColor: '#E2E6EA',
  },
  menuRowText: {
    fontFamily: 'NotoSansKR',
    fontWeight: '700',
    fontSize: responsiveWidth(18),
    color: '#17171B',
  },
  destructiveText: {
    color: '#ff3b30',
  },
});

export default AccountManagementScreen;