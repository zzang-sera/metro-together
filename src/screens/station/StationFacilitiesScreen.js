// üß≠ StationFacilitiesScreen.js
// Í∏∞Îä• ÏöîÏïΩ:
// - useApiFacilities + useLocalFacilities ÌõÖÏùÑ ÌôúÏö©Ìï¥ Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨
// - ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞/ÏóêÏä§Ïª¨Î†àÏù¥ÌÑ∞Îäî API ‚Üí Î°úÏª¨ fallback
// - ÎÇòÎ®∏ÏßÄÎäî Î°úÏª¨ JSONÎßå ÏÇ¨Ïö©
// - ‚ÄúÏÇ¨Îãπ: nÍ∞ú Í∞ÄÏ†∏Ïò§Îäî Ï§ë‚Äù Î°úÍ∑∏ Ï∂úÎ†•

import React, { useMemo, useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  SafeAreaView,
  ActivityIndicator,
  StatusBar,
  Alert,
} from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";
import { Ionicons } from "@expo/vector-icons";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useFontSize } from "../../contexts/FontSizeContext";
import { responsiveFontSize } from "../../utils/responsive";
import { doc, onSnapshot, updateDoc, arrayUnion, arrayRemove } from "firebase/firestore";
import { auth, db } from "../../config/firebaseConfig";

// ‚úÖ Ïª§Ïä§ÌÖÄ ÌõÖ
import { useApiFacilities } from "../../hook/useApiFacilities";
import { useLocalFacilities } from "../../hook/useLocalFacilities";

const MINT = "#21C9C6";
const INK = "#003F40";
const BG = "#F9F9F9";

export default function StationFacilitiesScreen() {
  const navigation = useNavigation();
  const route = useRoute();
  const { fontOffset } = useFontSize();
  const insets = useSafeAreaInsets();

  const { stationCode = "", stationName = "", line = "", type } = route.params || {};
  const currentUser = auth.currentUser;

  const [isFavorite, setIsFavorite] = useState(false);
  const [facilities, setFacilities] = useState([]);
  const [usingLocal, setUsingLocal] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [loading, setLoading] = useState(true);

  // ‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞ Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî
  useEffect(() => {
    if (!currentUser || !stationCode) return;
    const userDocRef = doc(db, "users", currentUser.uid);
    const unsubscribe = onSnapshot(userDocRef, (docSnap) => {
      if (docSnap.exists()) {
        const favs = docSnap.data().favorites || [];
        setIsFavorite(favs.includes(stationCode));
      }
    });
    return () => unsubscribe();
  }, [currentUser, stationCode]);

  // ‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞ ÌÜ†Í∏Ä
  const handleFavoriteToggle = async () => {
    if (!currentUser || !stationCode) {
      Alert.alert("Î°úÍ∑∏Ïù∏ ÌïÑÏöî", "Ï¶êÍ≤®Ï∞æÍ∏∞ Í∏∞Îä•ÏùÄ Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.");
      return;
    }
    const userDocRef = doc(db, "users", currentUser.uid);
    try {
      if (isFavorite) await updateDoc(userDocRef, { favorites: arrayRemove(stationCode) });
      else await updateDoc(userDocRef, { favorites: arrayUnion(stationCode) });
    } catch (error) {
      console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:", error);
      Alert.alert("Ïò§Î•ò", "ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
  };

  // ‚úÖ ÌõÖ ÏÇ¨Ïö©
  const {
    data: apiData,
    loading: apiLoading,
    error: apiError,
  } = useApiFacilities(stationName, stationCode, line, type);

  const {
    data: localData,
    loading: localLoading,
    error: localError,
  } = useLocalFacilities(stationName, stationCode, line, type);

  // ‚úÖ Îç∞Ïù¥ÌÑ∞ Í≤∞Ï†ï Î°úÏßÅ
  useEffect(() => {
    let cancelled = false;

    async function decideData() {
      setLoading(true);

      if (type === "EV" || type === "ES") {
        // API Î®ºÏ†Ä ÌôïÏù∏
        if (!apiLoading && apiData && apiData.length > 0) {
          console.log(`‚úÖ ${stationName}: ${apiData.length}Í∞ú Í∞ÄÏ†∏Ïò§Îäî Ï§ë`);
          if (!cancelled) {
            setFacilities(apiData);
            setUsingLocal(false);
            setErrorMsg("");
          }
        } else if (!apiLoading && (!apiData || apiData.length === 0 || apiError)) {
          // API Ïã§Ìå® ‚Üí Î°úÏª¨ fallback
          console.log(`‚ö†Ô∏è ${stationName}: API Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ‚Üí Î°úÏª¨Î°ú ÎåÄÏ≤¥`);
          if (!localLoading && localData) {
            console.log(`üìÅ ${stationName}: Î°úÏª¨ ${localData.length}Í∞ú Î∂àÎü¨Ïò¥`);
            if (!cancelled) {
              setFacilities(localData);
              setUsingLocal(true);
              setErrorMsg("Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏñ¥ Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§.");
            }
          }
        }
      } else {
        // ÎÇòÎ®∏ÏßÄÎäî Î°úÏª¨ JSONÎßå ÏÇ¨Ïö©
        if (!localLoading) {
          console.log(`üìÅ ${stationName}: Î°úÏª¨ ${localData.length}Í∞ú Î∂àÎü¨Ïò¥`);
          if (!cancelled) {
            setFacilities(localData);
            setUsingLocal(true);
            setErrorMsg(localError || "");
          }
        }
      }

      if (!cancelled) setLoading(false);
    }

    decideData();
    return () => {
      cancelled = true;
    };
  }, [
    type,
    stationName,
    apiData,
    apiError,
    apiLoading,
    localData,
    localError,
    localLoading,
  ]);

  // ‚úÖ ÏÉÅÎã® Ìó§Îçî
  const HeaderMint = useMemo(
    () => (
      <View style={[styles.mintHeader, { paddingTop: insets.top + 6 }]}>
        <StatusBar barStyle="dark-content" backgroundColor={MINT} />
        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.headerBtn}>
          <Ionicons name="chevron-back" size={22 + fontOffset / 2} color={INK} />
        </TouchableOpacity>
        <View style={styles.headerCenter}>
          <View style={styles.badge}>
            <Text style={[styles.badgeText, { fontSize: responsiveFontSize(12) + fontOffset }]}>
              {line || "?"}
            </Text>
          </View>
          <Text style={[styles.headerTitle, { fontSize: responsiveFontSize(18) + fontOffset }]}>
            {stationName || "Ïó≠Î™Ö"}
          </Text>
        </View>
        <TouchableOpacity onPress={handleFavoriteToggle} style={styles.starBtn}>
          <Ionicons
            name={isFavorite ? "star" : "star-outline"}
            size={24 + fontOffset / 2}
            color={isFavorite ? "#FFD700" : INK}
          />
        </TouchableOpacity>
      </View>
    ),
    [navigation, stationName, line, fontOffset, insets.top, isFavorite]
  );

  // ‚úÖ UI
  return (
    <SafeAreaView style={styles.container}>
      {HeaderMint}

      {usingLocal && !!errorMsg && (
        <View style={styles.banner}>
          <Text style={styles.bannerText}>{errorMsg}</Text>
        </View>
      )}

      {loading ? (
        <View style={styles.loadingWrap}>
          <ActivityIndicator />
          <Text style={styles.loadingText}>Î∂àÎü¨Ïò§Îäî Ï§ë‚Ä¶</Text>
        </View>
      ) : facilities.length === 0 ? (
        <View style={styles.emptyWrap}>
          <Text style={styles.emptyText}>ÌëúÏãúÌï† Ìï≠Î™©Ïù¥ ÏóÜÏñ¥Ïöî</Text>
        </View>
      ) : (
        <FlatList
          data={facilities}
          keyExtractor={(it, i) => it.id || `${i}`}
          contentContainerStyle={{ padding: 12, gap: 10, paddingBottom: 20 }}
          renderItem={({ item }) => (
            <View style={styles.card}>
              <View style={{ flex: 1 }}>
                <Text style={styles.cardTitle}>{item.title || "ÏãúÏÑ§"}</Text>
                {!!item.desc && <Text style={styles.cardDesc}>{item.desc}</Text>}
              </View>
              <View
                style={[
                  styles.badge2,
                  item.status === "ÏÇ¨Ïö©Í∞ÄÎä•" || item.status === "Ï†ïÏÉÅ"
                    ? styles.ok
                    : /Ï§ë/.test(item.status)
                    ? styles.warn
                    : styles.neutral,
                ]}
              >
                <Text style={styles.badgeText2}>{item.status || "-"}</Text>
              </View>
            </View>
          )}
        />
      )}
    </SafeAreaView>
  );
}

/* ---------------- Ïä§ÌÉÄÏùº ---------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: BG },
  mintHeader: {
    backgroundColor: MINT,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "center",
  },
  headerBtn: { padding: 6, width: 40, alignItems: "center" },
  headerCenter: { flex: 1, flexDirection: "row", justifyContent: "center", alignItems: "center", gap: 8 },
  starBtn: { padding: 8 },
  badge: { backgroundColor: "#AEEFED", paddingHorizontal: 8, paddingVertical: 2, borderRadius: 10 },
  badgeText: { color: INK, fontWeight: "bold" },
  headerTitle: { color: INK, fontWeight: "bold" },
  banner: {
    backgroundColor: "#FFF4D6",
    borderColor: "#FFE2A8",
    borderWidth: 1,
    margin: 12,
    borderRadius: 10,
    padding: 10,
  },
  bannerText: { color: "#7A5B00", fontWeight: "700" },
  loadingWrap: { flexDirection: "row", alignItems: "center", gap: 8, padding: 16 },
  loadingText: { color: "#333" },
  emptyWrap: { padding: 24, alignItems: "center" },
  emptyText: { color: "#666", fontWeight: "bold" },
  card: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10,
    backgroundColor: "#F8FAFC",
    borderRadius: 14,
    padding: 14,
    borderWidth: 1,
    borderColor: "#EEF2F7",
    marginHorizontal: 12,
  },
  cardTitle: { fontWeight: "bold", color: "#0f172a" },
  cardDesc: { color: "#334155", marginTop: 4 },
  badge2: { paddingHorizontal: 10, paddingVertical: 6, borderRadius: 999 },
  ok: { backgroundColor: "#d4f5f2" },
  warn: { backgroundColor: "#ffe4cc" },
  neutral: { backgroundColor: "#e5e7eb" },
  badgeText2: { fontWeight: "bold", color: "#0f172a" },
});
